<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaohai.note.dao.ArticleMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.xiaohai.note.pojo.entity.Article">
        <id column="id" property="id" />
        <result column="created_time" property="createdTime" />
        <result column="updated_time" property="updatedTime" />
        <result column="user_id" property="userId" />
        <result column="category_id" property="categoryId" />
        <result column="title" property="title" />
        <result column="cover" property="cover" />
        <result column="text" property="text" />
        <result column="is_push" property="isPush" />
        <result column="is_top" property="isTop" />
        <result column="top_time" property="topTime" />
        <result column="is_original" property="isOriginal" />
        <result column="original_url" property="originalUrl" />
        <result column="page_view" property="pageView" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        created_time,
        updated_time,
        id, user_id, category_id, title, cover, text, is_push, is_top, top_time, is_original, original_url, page_view
    </sql>
    <select id="selectPageArticleQuery" resultType="com.xiaohai.note.pojo.dto.ArticleDto">
        SELECT
            a.id,
            a.user_id as userId,
            (SELECT username from sys_user where id=a.user_id) as userName,
            (SELECT nick_name from sys_user where id=a.user_id) as nickName,
            (SELECT avatar from sys_user where id=a.user_id) as avatar,
            a.cover,
            a.title,
            a.category_id,
            a.is_push as isPush,
            a.is_top as isTop,
            a.is_original as isOriginal,
            a.page_view as pageView,
            a.created_time as createdTime,
            a.updated_time as updatedTime,
            GROUP_CONCAT( DISTINCT t.tag_id ) as tags,
            (select count(*) from b_comment where article_id=a.id) as commentCount,
            (select count(*) from b_article_like where article_id=a.id) as likeCount
        FROM
            b_article a
                LEFT JOIN b_article_tag t ON a.id = t.article_id
        <where>
            <if test="param.title != null and param.title != ''">
                a.title like concat('%',#{param.title},'%')
            </if>
            <if test="param.categoryId != null and param.categoryId != ''">
                and a.category_id=#{param.categoryId}
            </if>
            <if test="param.tagId != null and param.tagId != ''">
                and a.id in (SELECT article_id FROM b_article_tag where tag_id=#{param.tagId})
            </if>
            <if test="param.isPush != null">
                and a.is_push=#{param.isPush}
            </if>
            <if test="param.isOriginal != null and param.isOriginal != ''">
                and a.is_original=#{param.isOriginal}
            </if>
            <if test="userId != null and userId != ''">
                and a.user_id=#{userId}
            </if>
        </where>
        GROUP BY
            a.id
        ORDER BY
            a.is_top DESC,
            a.top_time DESC,
            a.created_time DESC
    </select>
    <select id="getPageView" resultType="java.lang.Long">
        SELECT sum(page_view) FROM b_article
        <where>
            <if test="userId != null">
                and user_id=#{userId}
            </if>
        </where>
    </select>
    <select id="getCreatedTime" resultType="com.xiaohai.note.pojo.dto.DateCount">
        select date(updated_time) as date,count(id) as count from b_article where YEAR(updated_time)=YEAR(now()) GROUP BY date(updated_time)
    </select>
    <select id="findShowListByPage" resultType="com.xiaohai.note.pojo.dto.ArticleShowDto">
        SELECT
        a.id,
        a.user_id as userId,
        (SELECT username from sys_user where id=a.user_id) as userName,
        (SELECT nick_name from sys_user where id=a.user_id) as nickName,
        (SELECT avatar from sys_user where id=a.user_id) as avatar,
        a.cover,
        a.title,
        a.summary,
        a.category_id as categoryId,
        (SELECT name from b_category where id=a.category_id) as categoryName,
        a.is_push as isPush,
        a.is_top as isTop,
        a.is_original as isOriginal,
        a.page_view as pageView,
        a.created_time as createdTime,
        (select count(*) from b_comment where article_id=a.id) as commentCount,
        (select count(*) from b_article_like where article_id=a.id) as likeCount,
        GROUP_CONCAT( DISTINCT t.tag_id ) as tags
        FROM
        b_article a
        LEFT JOIN b_article_tag t ON a.id = t.article_id
        <where>
            is_push=1
            <if test="type != null and type ==3">
               and a.is_original=0
            </if>
            <if test="type != null and type ==4">
                and   a.is_original=1
            </if>
            <if test="type != null and type ==6 and id!=null">
                and a.category_id=#{id}
            </if>
            <if test="type != null and type ==5 and id!=null">
                and a.id in (SELECT article_id FROM b_article_tag where tag_id=#{id})
            </if>
        </where>
        GROUP BY
        a.id
        ORDER BY
        <if test="type != null and type ==2">
            a.page_view DESC,
        </if>
        <if test="type != null and type !=2">
            a.is_top DESC,
            a.top_time DESC,
        </if>
        a.created_time DESC
    </select>
    <select id="findBackListByPage" resultType="com.xiaohai.note.pojo.dto.ArticleShowDto">
        SELECT a.id,
               a.user_id                                              as userId,
               (SELECT username from sys_user where id = a.user_id)   as userName,
               (SELECT nick_name from sys_user where id = a.user_id)  as nickName,
               (SELECT avatar from sys_user where id = a.user_id)     as avatar,
               a.cover,
               a.title,
               a.summary,
               a.category_id                                          as categoryId,
               (SELECT name from b_category where id = a.category_id) as categoryName,
               a.is_push                                              as isPush,
               a.is_top                                               as isTop,
               a.is_original                                          as isOriginal,
               a.page_view                                            as pageView,
               a.created_time                                         as createdTime
        FROM b_article a
                 LEFT JOIN b_article_tag t ON a.id = t.article_id
        where is_push = 1
        GROUP BY a.id
        ORDER BY a.is_top DESC,
                 a.top_time DESC,
                 a.created_time DESC
    </select>
    <select id="findUserBasic" resultType="com.xiaohai.note.pojo.dto.UserBasicDto">
        SELECT CASE WHEN nick_name IS NULL || nick_name = '' THEN username ELSE nick_name END AS username,
               avatar,
               summary,
               gitee,
               github,
               qq_number as qqNumber,
               we_chat as weChat,
               (select count(*) from b_article a where  a.user_id=#{userId})as articleCount,
               (select count(distinct category_id) from b_article a where  a.user_id=#{userId})as categoryCount,
               (select count(distinct  t.tag_id) from b_article a LEFT JOIN b_article_tag t on a.id=t.article_id where  a.user_id=#{userId})as tagsCount,
               (SELECT COUNT(*) FROM b_comment c LEFT JOIN b_article a  on a.id=c.article_id where  a.user_id=#{userId})as messageCount
        FROM
            sys_user
        WHERE
            id =#{userId}
    </select>
    <select id="findShowBasic" resultType="com.xiaohai.note.pojo.dto.UserBasicDto">
        SELECT CASE WHEN nick_name IS NULL || nick_name = '' THEN username ELSE nick_name END AS username,
               avatar,
               summary,
               gitee,
               github,
               qq_number as qqNumber,
               we_chat as weChat,
               (select count(*) from b_article)as articleCount,
               (select count(distinct category_id) from b_article)as categoryCount,
               (select count(distinct  t.tag_id) from b_article a LEFT JOIN b_article_tag t on a.id=t.article_id)as tagsCount,
               (SELECT COUNT(*) FROM b_comment c LEFT JOIN b_article a  on a.id=c.article_id)as messageCount
        FROM
            sys_user
        WHERE
            id = 1
    </select>


</mapper>
